package mandelbrot_test

import (
	"fmt"

	mandelbrot "github.com/t-pwk/go-mandelbrot"
)

// Example of a small Mandelbrot set composed of 400 numbers (20 x 20) with 9 set to maximum iteration
func Example() {
	m := mandelbrot.Mandelbrot(mandelbrot.Min, mandelbrot.Max, 20, 20, 9)

	for i := range m {
		fmt.Println(m[i])
	}

	// Output:
	// [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
	// [0 0 0 0 0 0 0 1 1 1 1 1 1 1 0 0 0 0 0 0]
	// [0 0 0 0 0 1 1 1 1 1 1 2 4 3 2 1 0 0 0 0]
	// [0 0 0 0 1 1 1 1 1 2 2 3 5 9 3 2 1 1 0 0]
	// [0 0 0 1 1 1 1 1 2 2 3 4 9 9 5 3 2 1 1 0]
	// [0 0 1 1 1 1 1 2 3 4 9 9 9 9 9 6 9 2 1 1]
	// [0 1 1 1 1 2 3 3 4 6 9 9 9 9 9 9 9 3 1 1]
	// [0 1 1 2 3 9 5 6 6 9 9 9 9 9 9 9 9 3 1 1]
	// [0 2 2 3 3 8 9 9 9 9 9 9 9 9 9 9 9 3 2 1]
	// [0 3 4 5 9 9 9 9 9 9 9 9 9 9 9 9 9 3 2 1]
	// [0 3 4 5 9 9 9 9 9 9 9 9 9 9 9 9 9 3 2 1]
	// [0 2 2 3 3 8 9 9 9 9 9 9 9 9 9 9 9 3 2 1]
	// [0 1 1 2 3 9 5 6 6 9 9 9 9 9 9 9 9 3 1 1]
	// [0 1 1 1 1 2 3 3 4 6 9 9 9 9 9 9 9 3 1 1]
	// [0 0 1 1 1 1 1 2 3 4 9 9 9 9 9 6 9 2 1 1]
	// [0 0 0 1 1 1 1 1 2 2 3 4 9 9 5 3 2 1 1 0]
	// [0 0 0 0 1 1 1 1 1 2 2 3 5 9 3 2 1 1 0 0]
	// [0 0 0 0 0 1 1 1 1 1 1 2 4 3 2 1 0 0 0 0]
	// [0 0 0 0 0 0 0 1 1 1 1 1 1 1 0 0 0 0 0 0]
	// [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
}

// Example of a small Mandelbrot set composed of 400 numbers (20 x 20) with 9 set to maximum iteration presenting so called Elephant Valley
func Example_elephantValley() {
	m := mandelbrot.Mandelbrot(0.25+0.05i, 0.35-0.05i, 20, 20, 9)

	for i := range m {
		fmt.Println(m[i])
	}

	// Output:
	// [9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 8]
	// [9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 8]
	// [9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 8 7]
	// [9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 8 7 7]
	// [9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 8 7 7 7]
	// [9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 8 8 7 7 7]
	// [9 9 9 9 9 9 9 9 9 9 9 9 9 9 8 8 7 7 7 6]
	// [9 9 9 9 9 9 9 9 9 9 9 9 9 9 8 8 7 7 7 6]
	// [9 9 9 9 9 9 9 9 9 9 9 9 9 8 8 8 7 7 7 6]
	// [9 9 9 9 9 9 9 9 9 9 9 9 9 8 8 8 7 7 7 6]
	// [9 9 9 9 9 9 9 9 9 9 9 9 9 8 8 8 7 7 7 6]
	// [9 9 9 9 9 9 9 9 9 9 9 9 9 8 8 8 7 7 7 6]
	// [9 9 9 9 9 9 9 9 9 9 9 9 9 9 8 8 7 7 7 6]
	// [9 9 9 9 9 9 9 9 9 9 9 9 9 9 8 8 7 7 7 6]
	// [9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 8 8 7 7 7]
	// [9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 8 7 7 7]
	// [9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 8 7 7]
	// [9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 8 7]
	// [9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 8]
	// [9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 8]
}
