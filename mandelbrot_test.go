package mandelbrot

import (
	"reflect"
	"testing"
)

func BenchmarkIteration(b *testing.B) {
	for i := 0; i < b.N; i++ {
		Iter(0.1+0i, 20)
	}
}
func BenchmarkMandelbrot(b *testing.B) {
	for i := 0; i < b.N; i++ {
		Mandelbrot(Min, Max, 20, 20, 20)
	}
}

func TestMandelbrot(t *testing.T) {
	r := [][]uint{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 4, 3, 2, 1, 0, 0, 0, 0},
		{0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 3, 5, 14, 3, 2, 1, 1, 0, 0},
		{0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 3, 4, 20, 20, 5, 3, 2, 1, 1, 0},
		{0, 0, 1, 1, 1, 1, 1, 2, 3, 4, 20, 20, 16, 20, 19, 6, 13, 2, 1, 1},
		{0, 1, 1, 1, 1, 2, 3, 3, 4, 6, 20, 20, 20, 20, 20, 20, 16, 3, 1, 1},
		{0, 1, 1, 2, 3, 11, 5, 6, 6, 18, 20, 20, 20, 20, 20, 20, 17, 3, 1, 1},
		{0, 2, 2, 3, 3, 8, 20, 20, 13, 20, 20, 20, 20, 20, 20, 20, 20, 3, 2, 1},
		{0, 3, 4, 5, 9, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 17, 3, 2, 1},
		{0, 3, 4, 5, 9, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 17, 3, 2, 1},
		{0, 2, 2, 3, 3, 8, 20, 20, 13, 20, 20, 20, 20, 20, 20, 20, 20, 3, 2, 1},
		{0, 1, 1, 2, 3, 11, 5, 6, 6, 18, 20, 20, 20, 20, 20, 20, 17, 3, 1, 1},
		{0, 1, 1, 1, 1, 2, 3, 3, 4, 6, 20, 20, 20, 20, 20, 20, 16, 3, 1, 1},
		{0, 0, 1, 1, 1, 1, 1, 2, 3, 4, 20, 20, 16, 20, 19, 6, 13, 2, 1, 1},
		{0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 3, 4, 20, 20, 5, 3, 2, 1, 1, 0},
		{0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 3, 5, 14, 3, 2, 1, 1, 0, 0},
		{0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 4, 3, 2, 1, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}

	m := Mandelbrot(Min, Max, 20, 20, 20)

	if !reflect.DeepEqual(r, m) {
		t.Error("Mandelbrot results for width:20, height:20, iterations:20 are invalid")
	}
}
